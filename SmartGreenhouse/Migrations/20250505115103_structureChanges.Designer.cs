// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartGreenhouse;

#nullable disable

namespace SmartGreenhouse.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250505115103_structureChanges")]
    partial class structureChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GreenhousePlant", b =>
                {
                    b.Property<int>("GreenhousesId")
                        .HasColumnType("int");

                    b.Property<int>("PlantsId")
                        .HasColumnType("int");

                    b.HasKey("GreenhousesId", "PlantsId");

                    b.HasIndex("PlantsId");

                    b.ToTable("GreenhousePlant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartGreenhouse.Models.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("SmartGreenhouse.Models.Entities.DeviceState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("DoorStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("FanStatus")
                        .HasColumnType("bit");

                    b.Property<int>("GreenhouseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GreenhouseId");

                    b.ToTable("DeviceStates", (string)null);
                });

            modelBuilder.Entity("SmartGreenhouse.Models.Entities.Greenhouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Greenhouses", (string)null);
                });

            modelBuilder.Entity("SmartGreenhouse.Models.Entities.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExampleNames")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("OptimalAirHumidityMax")
                        .HasColumnType("real");

                    b.Property<float>("OptimalAirHumidityMin")
                        .HasColumnType("real");

                    b.Property<float>("OptimalAirTempMax")
                        .HasColumnType("real");

                    b.Property<float>("OptimalAirTempMin")
                        .HasColumnType("real");

                    b.Property<float>("OptimalLightHourPerDay")
                        .HasColumnType("real");

                    b.Property<float>("OptimalLightMax")
                        .HasColumnType("real");

                    b.Property<float>("OptimalLightMin")
                        .HasColumnType("real");

                    b.Property<float>("OptimalSoilHumidityMax")
                        .HasColumnType("real");

                    b.Property<float>("OptimalSoilHumidityMin")
                        .HasColumnType("real");

                    b.Property<float>("OptimalSoilTempMax")
                        .HasColumnType("real");

                    b.Property<float>("OptimalSoilTempMin")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Plants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Овочі",
                            ExampleNames = "Помідори, Огірки, Перець, Баклажани",
                            Features = "Огірки потребують більшої вологості, баклажани — стабільного тепла, перець — чутливий до перепадів температур.",
                            OptimalAirHumidityMax = 80f,
                            OptimalAirHumidityMin = 60f,
                            OptimalAirTempMax = 26f,
                            OptimalAirTempMin = 18f,
                            OptimalLightHourPerDay = 10f,
                            OptimalLightMax = 30000f,
                            OptimalLightMin = 18000f,
                            OptimalSoilHumidityMax = 75f,
                            OptimalSoilHumidityMin = 65f,
                            OptimalSoilTempMax = 24f,
                            OptimalSoilTempMin = 18f
                        },
                        new
                        {
                            Id = 2,
                            Category = "Зелень",
                            ExampleNames = "Салат, Шпинат, Кріп, Петрушка, Базилік",
                            Features = "Базилік полюбляє тепліші умови, ніж інша зелень.",
                            OptimalAirHumidityMax = 90f,
                            OptimalAirHumidityMin = 70f,
                            OptimalAirTempMax = 22f,
                            OptimalAirTempMin = 15f,
                            OptimalLightHourPerDay = 8f,
                            OptimalLightMax = 20000f,
                            OptimalLightMin = 10000f,
                            OptimalSoilHumidityMax = 70f,
                            OptimalSoilHumidityMin = 60f,
                            OptimalSoilTempMax = 20f,
                            OptimalSoilTempMin = 16f
                        },
                        new
                        {
                            Id = 3,
                            Category = "Коренеплоди",
                            ExampleNames = "Морква, Буряк, Редис, Картопля",
                            Features = "Редис швидко росте в прохолодних умовах, картопля потребує глибокого ґрунту.",
                            OptimalAirHumidityMax = 75f,
                            OptimalAirHumidityMin = 60f,
                            OptimalAirTempMax = 20f,
                            OptimalAirTempMin = 12f,
                            OptimalLightHourPerDay = 9f,
                            OptimalLightMax = 25000f,
                            OptimalLightMin = 15000f,
                            OptimalSoilHumidityMax = 80f,
                            OptimalSoilHumidityMin = 65f,
                            OptimalSoilTempMax = 18f,
                            OptimalSoilTempMin = 10f
                        },
                        new
                        {
                            Id = 4,
                            Category = "Ягоди",
                            ExampleNames = "Полуниця, Малина, Лохина, Смородина",
                            Features = "Лохина потребує кислий ґрунт; малина не переносить застійної води.",
                            OptimalAirHumidityMax = 85f,
                            OptimalAirHumidityMin = 60f,
                            OptimalAirTempMax = 24f,
                            OptimalAirTempMin = 16f,
                            OptimalLightHourPerDay = 8f,
                            OptimalLightMax = 30000f,
                            OptimalLightMin = 20000f,
                            OptimalSoilHumidityMax = 80f,
                            OptimalSoilHumidityMin = 70f,
                            OptimalSoilTempMax = 20f,
                            OptimalSoilTempMin = 15f
                        },
                        new
                        {
                            Id = 5,
                            Category = "Фрукти",
                            ExampleNames = "Лимон, Апельсин, Гранат, Інжир",
                            Features = "Цитрусові не переносять переохолодження; інжир потребує періоду спокою взимку.",
                            OptimalAirHumidityMax = 70f,
                            OptimalAirHumidityMin = 50f,
                            OptimalAirTempMax = 28f,
                            OptimalAirTempMin = 20f,
                            OptimalLightHourPerDay = 10f,
                            OptimalLightMax = 35000f,
                            OptimalLightMin = 25000f,
                            OptimalSoilHumidityMax = 75f,
                            OptimalSoilHumidityMin = 60f,
                            OptimalSoilTempMax = 22f,
                            OptimalSoilTempMin = 18f
                        },
                        new
                        {
                            Id = 6,
                            Category = "Тепличні квіти",
                            ExampleNames = "Троянди, Орхідеї, Тюльпани",
                            Features = "Орхідеї потребують розсіяного світла; тюльпани люблять прохолодні ночі.",
                            OptimalAirHumidityMax = 80f,
                            OptimalAirHumidityMin = 60f,
                            OptimalAirTempMax = 25f,
                            OptimalAirTempMin = 18f,
                            OptimalLightHourPerDay = 8f,
                            OptimalLightMax = 25000f,
                            OptimalLightMin = 12000f,
                            OptimalSoilHumidityMax = 70f,
                            OptimalSoilHumidityMin = 55f,
                            OptimalSoilTempMax = 22f,
                            OptimalSoilTempMin = 16f
                        },
                        new
                        {
                            Id = 7,
                            Category = "Гриби",
                            ExampleNames = "Печериці, Гливи, Трюфелі",
                            Features = "Гриби не потребують багато світла; трюфелі ростуть у симбіозі з деревами.",
                            OptimalAirHumidityMax = 95f,
                            OptimalAirHumidityMin = 80f,
                            OptimalAirTempMax = 20f,
                            OptimalAirTempMin = 14f,
                            OptimalLightHourPerDay = 2f,
                            OptimalLightMax = 5000f,
                            OptimalLightMin = 1000f,
                            OptimalSoilHumidityMax = 90f,
                            OptimalSoilHumidityMin = 75f,
                            OptimalSoilTempMax = 18f,
                            OptimalSoilTempMin = 14f
                        });
                });

            modelBuilder.Entity("SmartGreenhouse.Models.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SmartGreenhouse.Models.Entities.SensorReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AirHum")
                        .HasColumnType("real");

                    b.Property<float>("AirTemp")
                        .HasColumnType("real");

                    b.Property<int>("GreenhouseId")
                        .HasColumnType("int");

                    b.Property<float>("LightLevel")
                        .HasColumnType("real");

                    b.Property<float>("SoilHum")
                        .HasColumnType("real");

                    b.Property<float>("SoilTemp")
                        .HasColumnType("real");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GreenhouseId");

                    b.ToTable("SensorReadings", (string)null);
                });

            modelBuilder.Entity("SmartGreenhouse.Models.Entities.UserSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AirHumidityMax")
                        .HasColumnType("real");

                    b.Property<float>("AirHumidityMin")
                        .HasColumnType("real");

                    b.Property<float>("AirTempMax")
                        .HasColumnType("real");

                    b.Property<float>("AirTempMin")
                        .HasColumnType("real");

                    b.Property<int>("GreenhouseId")
                        .HasColumnType("int");

                    b.Property<float>("LightHoursPerDay")
                        .HasColumnType("real");

                    b.Property<float>("LightMax")
                        .HasColumnType("real");

                    b.Property<float>("LightMin")
                        .HasColumnType("real");

                    b.Property<float>("SoilHumidityMax")
                        .HasColumnType("real");

                    b.Property<float>("SoilHumidityMin")
                        .HasColumnType("real");

                    b.Property<float>("SoilTempMax")
                        .HasColumnType("real");

                    b.Property<float>("SoilTempMin")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GreenhouseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("GreenhousePlant", b =>
                {
                    b.HasOne("SmartGreenhouse.Models.Entities.Greenhouse", null)
                        .WithMany()
                        .HasForeignKey("GreenhousesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGreenhouse.Models.Entities.Plant", null)
                        .WithMany()
                        .HasForeignKey("PlantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SmartGreenhouse.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SmartGreenhouse.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGreenhouse.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SmartGreenhouse.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartGreenhouse.Models.Entities.DeviceState", b =>
                {
                    b.HasOne("SmartGreenhouse.Models.Entities.Greenhouse", "Greenhouse")
                        .WithMany("DeviceStates")
                        .HasForeignKey("GreenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Greenhouse");
                });

            modelBuilder.Entity("SmartGreenhouse.Models.Entities.Greenhouse", b =>
                {
                    b.HasOne("SmartGreenhouse.Models.Entities.AppUser", "User")
                        .WithMany("Greenhouses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartGreenhouse.Models.Entities.RefreshToken", b =>
                {
                    b.HasOne("SmartGreenhouse.Models.Entities.AppUser", "AppUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("SmartGreenhouse.Models.Entities.SensorReading", b =>
                {
                    b.HasOne("SmartGreenhouse.Models.Entities.Greenhouse", "Greenhouse")
                        .WithMany("SensorReadings")
                        .HasForeignKey("GreenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Greenhouse");
                });

            modelBuilder.Entity("SmartGreenhouse.Models.Entities.UserSetting", b =>
                {
                    b.HasOne("SmartGreenhouse.Models.Entities.Greenhouse", "Greenhouse")
                        .WithMany("UserSettings")
                        .HasForeignKey("GreenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGreenhouse.Models.Entities.AppUser", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Greenhouse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartGreenhouse.Models.Entities.AppUser", b =>
                {
                    b.Navigation("Greenhouses");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("SmartGreenhouse.Models.Entities.Greenhouse", b =>
                {
                    b.Navigation("DeviceStates");

                    b.Navigation("SensorReadings");

                    b.Navigation("UserSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
